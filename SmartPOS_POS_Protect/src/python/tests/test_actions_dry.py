#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è planner/actions.py –≤ —Ä–µ–∂–∏–º–µ dry-run

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É.

–ê–≤—Ç–æ—Ä: SmartPOS POS Protect Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import pathlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(pathlib.Path(__file__).parent.parent))

from planner.actions import ACTIONS

def _call(name, **kwargs):
    """–í—ã–∑–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    fn = ACTIONS[name]
    return fn({"dry": True, **kwargs})

def test_clear_print_queue_dry():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("clear_print_queue", timeout_sec=1)
    assert result, f"clear_print_queue dry-run should return True, got: {result}"
    print("‚úÖ test_clear_print_queue_dry passed")

def test_collect_wer_bundle_dry():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ WER bundle –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("collect_wer_bundle", timeout_sec=1)
    assert result, f"collect_wer_bundle dry-run should return True, got: {result}"
    print("‚úÖ test_collect_wer_bundle_dry passed")

def test_restart_service_dry():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("restart_service", timeout_sec=1, name="Spooler")
    assert result, f"restart_service dry-run should return True, got: {result}"
    print("‚úÖ test_restart_service_dry passed")

def test_link_smart_dry():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ SMART –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("link_smart", timeout_sec=1)
    assert result, f"link_smart dry-run should return True, got: {result}"
    print("‚úÖ test_link_smart_dry passed")

def test_plan_chkdsk_dry():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è chkdsk –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("plan_chkdsk", timeout_sec=1, volume="C:")
    assert result, f"plan_chkdsk dry-run should return True, got: {result}"
    print("‚úÖ test_plan_chkdsk_dry passed")

def test_run_sfc_dry():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ sfc –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("run_sfc", timeout_sec=1)
    assert result, f"run_sfc dry-run should return True, got: {result}"
    print("‚úÖ test_run_sfc_dry passed")

def test_run_dism_dry():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ dism –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("run_dism", timeout_sec=1)
    assert result, f"run_dism dry-run should return True, got: {result}"
    print("‚úÖ test_run_dism_dry passed")

def test_reset_wu_components_dry():
    """–¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Windows Update –≤ —Ä–µ–∂–∏–º–µ dry-run."""
    result = _call("reset_wu_components", timeout_sec=1)
    assert result, f"reset_wu_components dry-run should return True, got: {result}"
    print("‚úÖ test_reset_wu_components_dry passed")

def test_actions_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    expected_actions = [
        "restart_service",
        "clear_print_queue", 
        "collect_wer_bundle",
        "link_smart",
        "plan_chkdsk",
        "run_sfc",
        "run_dism",
        "reset_wu_components"
    ]
    
    for action in expected_actions:
        assert action in ACTIONS, f"Action '{action}' not found in ACTIONS"
        assert callable(ACTIONS[action]), f"Action '{action}' is not callable"
    
    print("‚úÖ test_actions_availability passed")

def test_dry_run_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ dry-run —Ä–µ–∂–∏–º–∞."""
    # –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ dry-run –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True
    for action_name, action_func in ACTIONS.items():
        try:
            result = action_func({"dry": True, "timeout_sec": 1})
            assert result is True, f"Action '{action_name}' dry-run returned {result}, expected True"
        except Exception as e:
            print(f"‚ö†Ô∏è Action '{action_name}' failed in dry-run: {e}")
    
    print("‚úÖ test_dry_run_consistency passed")

if __name__ == "__main__":
    print("Running actions dry-run tests...")
    
    try:
        test_actions_availability()
        test_dry_run_consistency()
        test_clear_print_queue_dry()
        test_collect_wer_bundle_dry()
        test_restart_service_dry()
        test_link_smart_dry()
        test_plan_chkdsk_dry()
        test_run_sfc_dry()
        test_run_dism_dry()
        test_reset_wu_components_dry()
        
        print("\nüéâ All actions dry-run tests passed!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        sys.exit(1)
