#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è rules.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É RuleEngine –∏ –º–∞—Ç—á–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª.

–ê–≤—Ç–æ—Ä: SmartPOS POS Protect Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import json
import sys
import pathlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(pathlib.Path(__file__).parent.parent))

from rules import RuleEngine

def test_spooler_rule_match():
    """–¢–µ—Å—Ç –º–∞—Ç—á–∏–Ω–≥–∞ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Spooler."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    rules_path = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "pos_protect_rules.json"
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_data = json.load(f)
    
    engine = RuleEngine(rules_data)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Spooler (—Ç–æ–ª—å–∫–æ EventLog —Å–æ–±—ã—Ç–∏—è)
    events = [
        {"type": "eventlog", "provider": "Service Control Manager", "event_id": 7031}
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏–Ω–≥
    matched = engine.match(events)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ PRINT_SPOOLER_STUCK —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    spooler_matched = any(x["issue_code"] == "PRINT_SPOOLER_STUCK" for x in matched)
    assert spooler_matched, f"Expected PRINT_SPOOLER_STUCK rule to match, got: {matched}"
    
    print("‚úÖ test_spooler_rule_match passed")

def test_wer_rule_match():
    """–¢–µ—Å—Ç –º–∞—Ç—á–∏–Ω–≥–∞ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è WER —Å–æ–±—ã—Ç–∏–π."""
    rules_path = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "pos_protect_rules.json"
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_data = json.load(f)
    
    engine = RuleEngine(rules_data)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ WER —Å–æ–±—ã—Ç–∏—è
    events = [
        {"type": "wer", "proc": "test.exe", "bucket": "AppCrash_test.exe_123"},
        {"type": "wer", "proc": "plugins_nms.exe", "bucket": "AppCrash_plugins_nms.exe_456"}
    ]
    
    matched = engine.match(events)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ SIMPLE_WER_CRASH —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    assert any(x["issue_code"] == "SIMPLE_WER_CRASH" for x in matched), \
        f"Expected SIMPLE_WER_CRASH rule to match, got: {matched}"
    
    print("‚úÖ test_wer_rule_match passed")

def test_disk_io_rule_match():
    """–¢–µ—Å—Ç –º–∞—Ç—á–∏–Ω–≥–∞ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Disk I/O."""
    rules_path = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "pos_protect_rules.json"
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_data = json.load(f)
    
    engine = RuleEngine(rules_data)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è Disk I/O
    events = [
        {"type": "eventlog", "provider": "Disk", "event_id": 51},
        {"type": "eventlog", "provider": "Disk", "event_id": 153},
        {"type": "eventlog", "provider": "storahci"},
        {"type": "eventlog", "provider": "volmgr"},
        {"type": "eventlog", "provider": "Ntfs"}
    ]
    
    matched = engine.match(events)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ DISK_IO_WARN —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    assert any(x["issue_code"] == "DISK_IO_WARN" for x in matched), \
        f"Expected DISK_IO_WARN rule to match, got: {matched}"
    
    print("‚úÖ test_disk_io_rule_match passed")

def test_no_match():
    """–¢–µ—Å—Ç —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç."""
    rules_path = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "pos_protect_rules.json"
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_data = json.load(f)
    
    engine = RuleEngine(rules_data)
    
    # –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    events = [
        {"type": "eventlog", "provider": "SomeOtherProvider", "event_id": 9999},
        {"type": "wer", "proc": "unknown.exe", "bucket": "UnknownBucket"}
    ]
    
    matched = engine.match(events)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    assert len(matched) == 0, f"Expected no rules to match, got: {matched}"
    
    print("‚úÖ test_no_match passed")

def test_rule_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª."""
    rules_path = pathlib.Path(__file__).parent.parent.parent.parent / "config" / "pos_protect_rules.json"
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_data = json.load(f)
    
    engine = RuleEngine(rules_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    assert len(engine.rules) > 0, "No rules loaded"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    first_rule = engine.rules[0]
    assert "name" in first_rule, "Rule missing 'name' field"
    assert "match" in first_rule, "Rule missing 'match' field"
    assert "issue_code" in first_rule, "Rule missing 'issue_code' field"
    assert "plan" in first_rule, "Rule missing 'plan' field"
    
    print("‚úÖ test_rule_structure passed")

if __name__ == "__main__":
    print("Running rules tests...")
    
    try:
        test_rule_structure()
        test_spooler_rule_match()
        test_wer_rule_match()
        test_disk_io_rule_match()
        test_no_match()
        
        print("\nüéâ All rules tests passed!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        sys.exit(1)
