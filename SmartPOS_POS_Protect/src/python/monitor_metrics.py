#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ SmartPOS POS Protect.

–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python monitor_metrics.py [--reset] [--watch]

–û–ø—Ü–∏–∏:
    --reset    –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    --watch    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)

–ê–≤—Ç–æ—Ä: SmartPOS POS Protect Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import time
import argparse
from shared.pipeline import get_metrics, reset_metrics

def print_metrics(metrics):
    """–í—ã–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    print("\n=== –ú–ï–¢–†–ò–ö–ò SMARTPOS POS PROTECT ===")
    print(f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 40)
    
    if not metrics:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    collection_metrics = {k: v for k, v in metrics.items() if 'collected' in k}
    error_metrics = {k: v for k, v in metrics.items() if 'error' in k}
    processing_metrics = {k: v for k, v in metrics.items() if any(x in k for x in ['classified', 'generated'])}
    
    if collection_metrics:
        print("üìä –°–ë–û–† –î–ê–ù–ù–´–•:")
        for name, value in collection_metrics.items():
            print(f"  {name}: {value}")
    
    if processing_metrics:
        print("\n‚öôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê:")
        for name, value in processing_metrics.items():
            print(f"  {name}: {value}")
    
    if error_metrics:
        print("\n‚ùå –û–®–ò–ë–ö–ò:")
        for name, value in error_metrics.items():
            print(f"  {name}: {value}")
    
    print("-" * 40)

def watch_metrics():
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫."""
    print("–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        while True:
            metrics = get_metrics()
            print_metrics(metrics)
            time.sleep(5)
    except KeyboardInterrupt:
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ SmartPOS POS Protect")
    parser.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏")
    parser.add_argument("--watch", action="store_true", help="–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    args = parser.parse_args()
    
    if args.reset:
        reset_metrics()
        print("–ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
        return
    
    if args.watch:
        watch_metrics()
    else:
        metrics = get_metrics()
        print_metrics(metrics)

if __name__ == "__main__":
    main()
