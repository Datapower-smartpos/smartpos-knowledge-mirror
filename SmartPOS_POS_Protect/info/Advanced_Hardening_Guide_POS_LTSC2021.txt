Advanced Hardening Guide for SmartPOS on Windows 10 IoT Enterprise LTSC 2021
============================================================================

Цель:
-----
Повысить надёжность и диагностируемость POS-компьютеров, используя расширенные функции Windows
(вне EventLog и WER), пригодные для кастомных образов и оффлайн-сценариев.

------------------------------------------------------------------------------------
1. Проверка доступности WMI-классов (устранимость кастомных сборок и их последствий)
------------------------------------------------------------------------------------

Ключевые классы:

- Win32_LogicalDisk
- Win32_TemperatureProbe / MSAcpi_ThermalZoneTemperature
- Win32_Service
- Win32_PnPEntity
- Win32_PerfRawData_Processor*

PowerShell для теста:

    Get-WmiObject Win32_LogicalDisk
    Get-WmiObject -Namespace root\wmi -Class MSAcpi_ThermalZoneTemperature

Если возвращает ошибку WBEM_E_INVALID_CLASS → сборка кастомная/урезанная.

Рекомендовано: встроить в `test_agent.py` проверку доступа к WMI и лог ошибок.

-----------------------------------------------------------------
2. Диагностика служб (зависли, стартуют медленно, падают)
-----------------------------------------------------------------

Журнал: System, EventID:

- 7000–7049 → ошибки запуска
- 7036 → служба старт/стоп
- 7026 → ошибка загрузки драйвера

PowerShell:

    Get-EventLog -LogName System -EntryType Error -After (Get-Date).AddDays(-2)

Можно логировать конкретные службы: Winmgmt, Spooler, Windows Update, ShellHWDetection

----------------------------------------------------------------
3. Устройства с ошибками (Device Manager)
----------------------------------------------------------------

PowerShell:

    Get-WmiObject Win32_PnPEntity | Where-Object { $_.ConfigManagerErrorCode -ne 0 }

Служит для выявления сломанных драйверов, плохо вставленных USB, нестабильных весов.

---------------------------------------------------------------
4. Низкоуровневые сбои (ETW: Kernel, WHEA, Power)
---------------------------------------------------------------

Включить журналы:

    wevtutil sl "Microsoft-Windows-Kernel-Power" /e:true
    wevtutil sl "Microsoft-Windows-Kernel-WHEA" /e:true

Ключевые события:

- EventID 41 → внезапный сбой питания
- EventID 18 (WHEA-Logger) → сбой процессора, памяти, устройства

-------------------------------------------------------------------
5. SelfCheck: встроенная ежедневная проверка стабильности POS
-------------------------------------------------------------------

Возможности:

- Есть ли llama-run.exe
- Доступна ли модель GGUF
- Свободно ли >1ГБ на диске
- Работает ли Winmgmt
- Сколько % загрузки CPU

Реализуется через `test_agent.py`, логируется отдельно.

---------------------------------------------------------------
6. DEP, ASLR и другие политики защиты памяти
---------------------------------------------------------------

Проверка (PowerShell):

    Get-ProcessMitigation -System

- DEP: должно быть включено (AlwaysOn)
- ASLR: должен быть включён для dll

Если политики отключены → повышенный риск сбоев и безопасности.

---------------------------------------------------------------
7. Мониторинг нестабильных USB и устройств
---------------------------------------------------------------

Журнал: System, EventID:

- 219 → Driver failed to load
- 11, 15 → SCSI ошибки
- 134 → Device reset

PowerShell:

    Get-WinEvent -LogName System | Where-Object { $_.Id -eq 219 }

-------------------------------------------------------------------
8. SMART-деградация: Reallocated, Temp, PowerOnHours
-------------------------------------------------------------------

Использовать smartctl:

    smartctl -a /dev/sda

Поля:

- Reallocated_Sector_Ct
- Temperature_Celsius
- Power_On_Hours

Можно добавить модуль диагностики SSD в агента.

-------------------------------------------------------------------
После настройки:
-------------------------------------------------------------------

Создать журнал самодиагностики:
- Службы в состоянии Running
- WMI доступна
- WER и EventLog активны
- Модель LLM доступна
- SMART ошибок нет

Все эти проверки можно встроить в `test_agent.py` или `status_reporter.py`